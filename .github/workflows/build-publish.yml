name: Build and Publish

on:
  push:
    branches:
      - '**'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Build
      run: cargo build --release --verbose

    - name: Install cargo-deb
      run: cargo install cargo-deb

    - name: Build deb
      run: cargo deb

  publish:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/master' || (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged) }}

    steps:
    - name: Check out the code
      uses: actions/checkout@v4

    - name: Get current version
      id: get_version
      run: echo "version=$(cargo pkgid | sed 's/.*#//')" >> $GITHUB_ENV

    - name: Get published version
      id: get_published_version
      run: |
        # Extract the package name
        package_name=$(cargo pkgid | sed 's/.*#//; s/:.*//')

        published_version=$(cargo search "$package_name" --limit 1 | grep -oP '=\s*"\K[^"]+')

        if [ -z "$published_version" ]; then
          echo "Published version could not be found. Please ensure the package is published." >&2
          echo "published_version=none" >> $GITHUB_ENV # Set to none if not found
        else
          echo "published_version=$published_version" >> $GITHUB_ENV
        fi

    - name: Debug version variables
      run: |
        echo "Current version: ${{ env.version }}"
        echo "Published version: ${{ env.published_version }}"

    - name: Compare versions
      run: |
        if [ "${{ env.published_version }}" == "none" ]; then
          echo "newer_version=false" >> $GITHUB_ENV
        else
          if [ "$(printf "%s\n%s" "${{ env.published_version }}" "${{ env.version }}" | sort -V | head -n1)" != "${{ env.version }}" ]; then
            echo "newer_version=true" >> $GITHUB_ENV
          else
            echo "newer_version=false" >> $GITHUB_ENV
          fi
        fi

    - name: Publish to crates.io
      if: ${{ env.newer_version == 'true' }}
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      run: cargo publish --no-verify
